#!/bin/bash
# USAGE:
# ./xcodebuild [PROJECT | WORKSPACE] [SCHEME] [build|test] [filterstr e.g. "Apple TV"]
#
set -efx -o pipefail
#
# Map arguments
XCODEPROJ=$1
SCHEME=$2
ACTION=$3
DEVICE_FILTER=$4
#
# Validate arguments
if [ -z "$XCODEPROJ" ]; then echo "Xcode project not specified"; exit 1; fi
if [ -z "$SCHEME" ]; then echo "Scheme not specified"; exit 1; fi
if [ -z "$ACTION" ]; then echo "Action not specified"; exit 1; fi
#
# Resolve whether to use project or workspace argument
if [[ $XCODEPROJ == *.xcworkspace* ]] ;
then
    PROJECT_WS_ARG="-workspace"
else
  PROJECT_WS_ARG="-project"
fi
#
echo "Running xcodebuild $ACTION for project $XCODEPROJ scheme $SCHEME"
#
# There's no device filter
if [ -z "$DEVICE_FILTER" ]
then
    set -o pipefail && env NSUnbufferedIO=YES \
    xcodebuild clean $ACTION $PROJECT_WS_ARG "$XCODEPROJ" -scheme "$SCHEME" | xcpretty
#
# There is a device filter
else
    # Get matching devices from instruments
    # 1. Grab devices
    # 2. Filter on input string
    # 3. Negate filter containing plus sign (+) as tests are never performed on companion devices
    DEVICES="$(instruments -s devices | grep "$DEVICE_FILTER" | grep -v "+")"
    echo "Running command on:"
    echo "$DEVICES"
    
    set -o pipefail && env NSUnbufferedIO=YES \
    xcodebuild clean $ACTION \
    $PROJECT_WS_ARG "$XCODEPROJ" \
    -scheme "$SCHEME" \
    $(echo "$DEVICES" | cut -d "[" -f2 | cut -d "]" -f1 | sed 's/.*/-destination id=&/g' | tr '\r\n' ' ') \
    | xcpretty    
fi